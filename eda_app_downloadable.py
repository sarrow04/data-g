# -*- coding: utf-8 -*-
"""eda_app_downloadable

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hg5CD_2yS7loy2pdd0JpMuyyBbyCKqhQ
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import io # ▼▼▼ 追加 ▼▼▼

# 日本語フォントの文字化け対策
import japanize_matplotlib

# --- Streamlitアプリの基本設定 ---
st.set_page_config(page_title="対話型EDAツール", page_icon="📊", layout="wide")
st.title("📊 対話型 探索的データ分析（EDA）ツール")

# --- Session Stateの初期化 ---
if 'df' not in st.session_state:
    st.session_state.df = None

# --- サイドバー ---
with st.sidebar:
    st.header("1. ファイルをアップロード")
    uploaded_file = st.file_uploader("CSVまたはExcelファイルをアップロード", type=['csv', 'xlsx'])

    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            st.session_state.df = df
            st.success("ファイルが正常に読み込まれました！")
        except Exception as e:
            st.error(f"ファイルの読み込み中にエラーが発生しました: {e}")

# --- メイン画面 ---
if st.session_state.df is not None:
    df = st.session_state.df

    tab1, tab2, tab3, tab4 = st.tabs(["データ概要", "単変量分析", "二変量分析", "相関分析"])

    # --- Tab1: データ概要 ---
    with tab1:
        st.subheader("データプレビュー")
        st.dataframe(df.head())
        st.subheader("基本情報")
        st.markdown(f"**行数:** {df.shape[0]} 行, **列数:** {df.shape[1]} 列")
        st.subheader("基本統計量")
        st.dataframe(df.describe(include='all'))

    # --- Tab2: 単変量分析 ---
    with tab2:
        st.subheader("1つの変数の分布を確認")
        selected_col = st.selectbox("分析したい列を選択してください", df.columns, key="tab2_select")

        if selected_col:
            st.write(f"**「{selected_col}」列の分布**")

            fig, ax = plt.subplots() # グラフオブジェクトを作成
            file_name = "" # ファイル名を初期化

            if pd.api.types.is_numeric_dtype(df[selected_col]):
                sns.histplot(df[selected_col], kde=True, ax=ax)
                ax.set_title(f'{selected_col} のヒストグラム')
                file_name = f"histogram_{selected_col}.png"
            else:
                sns.countplot(y=df[selected_col], order=df[selected_col].value_counts().index, ax=ax)
                ax.set_title(f'{selected_col} のカウントプロット')
                file_name = f"countplot_{selected_col}.png"

            st.pyplot(fig) # グラフを表示

            # ▼▼▼ 以下、ダウンロード機能を追加 ▼▼▼
            buf = io.BytesIO()
            fig.savefig(buf, format="png")
            st.download_button(
                label="グラフをダウンロード",
                data=buf.getvalue(),
                file_name=file_name,
                mime="image/png",
            )
            # ▲▲▲ ここまで ▲▲▲

    # --- Tab3: 二変量分析 ---
    with tab3:
        st.subheader("2つの変数の関係を確認")
        plot_type = st.radio("グラフの種類を選択", ["散布図", "箱ひげ図"])

        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        categorical_cols = df.select_dtypes(include='object').columns.tolist()

        if plot_type == "散布図":
            st.write("**2つの数値変数の関係性（相関）**を可視化します。")
            x_axis = st.selectbox("X軸の変数（数値）", numeric_cols, key="scatter_x")
            y_axis = st.selectbox("Y軸の変数（数値）", numeric_cols, key="scatter_y")

            if x_axis and y_axis:
                fig, ax = plt.subplots()
                sns.scatterplot(x=df[x_axis], y=df[y_axis], ax=ax)
                ax.set_title(f'{x_axis} と {y_axis} の散布図')
                st.pyplot(fig)

                # ▼▼▼ 以下、ダウンロード機能を追加 ▼▼▼
                buf = io.BytesIO()
                fig.savefig(buf, format="png")
                st.download_button(
                    label="グラフをダウンロード",
                    data=buf.getvalue(),
                    file_name=f"scatter_{x_axis}_vs_{y_axis}.png",
                    mime="image/png",
                )
                # ▲▲▲ ここまで ▲▲▲

        elif plot_type == "箱ひげ図":
            st.write("**カテゴリごとの数値変数の分布**を比較します。")
            cat_axis = st.selectbox("カテゴリ変数", categorical_cols, key="box_cat")
            num_axis = st.selectbox("数値変数", numeric_cols, key="box_num")

            if cat_axis and num_axis:
                fig, ax = plt.subplots()
                sns.boxplot(x=df[cat_axis], y=df[num_axis], ax=ax)
                ax.set_title(f'{cat_axis} ごとの {num_axis} の分布')
                plt.xticks(rotation=45)
                st.pyplot(fig)

                # ▼▼▼ 以下、ダウンロード機能を追加 ▼▼▼
                buf = io.BytesIO()
                fig.savefig(buf, format="png")
                st.download_button(
                    label="グラフをダウンロード",
                    data=buf.getvalue(),
                    file_name=f"boxplot_{cat_axis}_vs_{num_axis}.png",
                    mime="image/png",
                )
                # ▲▲▲ ここまで ▲▲▲

    # --- Tab4: 相関分析 ---
    with tab4:
        st.subheader("数値データ間の相関ヒートマップ")
        st.write("数値変数すべての組み合わせの相関係数を色で表現したものです。")

        numeric_cols = df.select_dtypes(include=np.number).columns
        if len(numeric_cols) > 1:
            corr_matrix = df[numeric_cols].corr()

            fig, ax = plt.subplots(figsize=(12, 10))
            sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', ax=ax)
            st.pyplot(fig)

            # ▼▼▼ 以下、ダウンロード機能を追加 ▼▼▼
            buf = io.BytesIO()
            fig.savefig(buf, format="png")
            st.download_button(
                label="ヒートマップをダウンロード",
                data=buf.getvalue(),
                file_name="correlation_heatmap.png",
                mime="image/png",
            )
            # ▲▲▲ ここまで ▲▲▲
        else:
            st.warning("相関分析を行うには、少なくとも2つ以上の数値列が必要です。")

else:
    st.info("サイドバーからファイル（CSVまたはExcel）をアップロードして分析を開始してください。")